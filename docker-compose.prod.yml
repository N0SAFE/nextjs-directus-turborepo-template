services:
  # API services (defined directly to override networks)
  api-db-prod:
    container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-db-prod
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_DATABASE:-nestjs_api}
    volumes:
      - api_db_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_DATABASE:-nestjs_api}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network_prod

  api-cache-prod:
    container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-cache-prod
    image: redis:8-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s
    networks:
      - app_network_prod

  api-prod:
    container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-prod
    build:
      context: .
      dockerfile: ./docker/Dockerfile.api.prod
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
        - API_PORT=${API_PORT:-3001}
        - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
        - API_PING_PATH=${API_PING_PATH:-/health}
    depends_on:
      api-db-prod:
        condition: service_healthy
      api-cache-prod:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "${API_PORT:-3001}:${API_PORT:-3001}"
    environment:
      NODE_ENV: production
      API_PORT: ${API_PORT:-3001}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@api-db-prod:5432/${DB_DATABASE:-nestjs_api}
      REDIS_URL: redis://api-cache-prod:6379
      JWT_SECRET: ${JWT_SECRET:-jwt-fallback-secret}
      AUTH_SECRET: ${AUTH_SECRET:-auth-fallback-secret}
      NEXT_PUBLIC_WEB_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      # CORS Configuration for cross-origin requests from web app
      CORS_ORIGIN: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      # Production optimizations
      LOG_LEVEL: warn
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://127.0.0.1:${API_PORT:-3001}/health || exit 1
      start_period: 15s
      interval: 15s
      timeout: 15s
      retries: 5
    networks:
      - app_network_prod

  # Web service (using runtime compilation for fresh builds)
  web-prod:
    container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-web-prod
    build:
      context: .
      dockerfile: ./docker/Dockerfile.web.runtime.prod
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
        - API_PORT=${API_PORT:-3001}
        - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
        - NEXT_PUBLIC_APP_PORT=${NEXT_PUBLIC_APP_PORT:-3000}
        - AUTH_SECRET=${AUTH_SECRET:-QgafJQw3O/k1gambz7YGKjtj5ZZe0dnL/WlSw4PtMDc=}
        - API_ADMIN_TOKEN=${API_ADMIN_TOKEN:-secret-admin-token}
        - API_PING_PATH=${API_PING_PATH:-/health}
    restart: unless-stopped
    ports:
      - "${NEXT_PUBLIC_APP_PORT:-3000}:3000"
    depends_on:
      api-prod:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - API_PING_PATH=/health
      # Server-side API URL (internal Docker network)
      - API_URL=http://api-prod:${API_PORT:-3001}
      # Client-side API URL (localhost for browser)
      - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT:-3001}
      - NEXT_PUBLIC_API_PORT=${API_PORT:-3001}
      - NEXT_PUBLIC_APP_URL=http://localhost:${NEXT_PUBLIC_APP_PORT:-3000}
      - NEXT_PUBLIC_APP_PORT=${NEXT_PUBLIC_APP_PORT:-3000}
      - API_ADMIN_TOKEN=${API_ADMIN_TOKEN:-secret-admin-token}
      - AUTH_SECRET=${AUTH_SECRET:-QgafJQw3O/k1gambz7YGKjtj5ZZe0dnL/WlSw4PtMDc=}
    networks:
      - app_network_prod

networks:
  app_network_prod:
    name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}_app_network_prod
    driver: bridge

volumes:
  api_db_data_prod:
    name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}_api_db_data_prod
