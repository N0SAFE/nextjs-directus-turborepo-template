name: CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        # Run tests on all PRs regardless of target branch
        branches: ["**"]

env:
    BUN_VERSION: "1.2.14"
    NODE_VERSION: "22"

jobs:
    # Job 0: Generate Declarative Routes
    generate-declarative-routes:
        name: 📝 Generate Declarative Routes
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - name: 📚 Checkout repository
              uses: actions/checkout@v4

            - name: 🐰 Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: 📦 Install dependencies
              run: |
                if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
                  echo "Dependabot PR detected: running bun install without --frozen-lockfile"
                  bun install
                else
                  bun install --frozen-lockfile
                fi

            - name: 📝 Generate declarative routes
              run: bun run --cwd apps/web dr:build

    # Job 1: Lint and Type Check
    lint-and-typecheck:
        name: 🔍 Lint & Type Check
        runs-on: ubuntu-latest
        timeout-minutes: 10
        needs: generate-declarative-routes
        env:
            # Essential environment variables for linting/type checking
            API_URL: http://localhost:8055/
            API_PORT: 8055
            API_PING_PATH: /server/health
            API_ADMIN_TOKEN: ci-test-admin-token
            NEXT_PUBLIC_APP_URL: http://localhost:3003/
            NEXT_PUBLIC_APP_PORT: 3003
            AUTH_SECRET: ci-test-auth-secret
            DIRECTUS_SECRET: ci-test-directus-secret
            DIRECTUS_ADMIN_EMAIL: ci-admin@test.com
            DIRECTUS_ADMIN_PASSWORD: ci-test-password
            NEXT_TELEMETRY_DISABLED: 1
            NODE_ENV: test
            MILLION_LINT: false
            REACT_SCAN: false
            SHOW_AUTH_LOGS: false
            NEXT_PUBLIC_SHOW_AUTH_LOGS: false

        steps:
            - name: 📚 Checkout repository
              uses: actions/checkout@v4

            - name: 🐰 Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: 📦 Install dependencies
              run: |
                if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
                  echo "Dependabot PR detected: running bun install without --frozen-lockfile"
                  bun install
                else
                  bun install --frozen-lockfile
                fi

            - name: 🔍 Run ESLint
              run: bun run lint

            - name: 🎨 Check formatting with Prettier
              run: bun run format

    # Job 2: Build
    build:
        name: 🏗️ Build
        runs-on: ubuntu-latest
        timeout-minutes: 15
        needs: [lint-and-typecheck, generate-declarative-routes]
        env:
            # API Configuration
            API_URL: http://localhost:8055/
            API_PORT: 8055
            API_PING_PATH: /server/health
            API_ADMIN_TOKEN: ci-test-admin-token

            # App Configuration
            NEXT_PUBLIC_APP_URL: http://localhost:3003/
            NEXT_PUBLIC_APP_PORT: 3003

            # Database Configuration (for testing)
            DB_DATABASE: directus_test
            DB_ROOT_PASSWORD: test-password

            # Authentication
            AUTH_SECRET: ci-test-auth-secret-QgafJQw3O-k1gambz7YGKjtj5ZZe0dnL-WlSw4PtMDc

            # Directus Configuration
            DIRECTUS_SECRET: ci-test-directus-secret-value
            DIRECTUS_ADMIN_EMAIL: ci-admin@test.com
            DIRECTUS_ADMIN_PASSWORD: ci-test-password

            # Next.js Configuration
            NEXT_TELEMETRY_DISABLED: 1
            NODE_ENV: test

            # Development tools (disabled for CI)
            MILLION_LINT: false
            REACT_SCAN: false
            SHOW_AUTH_LOGS: false
            NEXT_PUBLIC_SHOW_AUTH_LOGS: false
            
            # Build optimization
            SKIP_STATIC_GENERATION: true

        steps:
            - name: 📚 Checkout repository
              uses: actions/checkout@v4

            - name: 🐰 Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: 📦 Install dependencies
              run: |
                if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
                  echo "Dependabot PR detected: running bun install without --frozen-lockfile"
                  bun install
                else
                  bun install --frozen-lockfile
                fi

            - name: 🏗️ Build packages
              run: |
                  # Build shared packages first
                  bun x turbo run build --filter="!web"
                  # Build web app without static generation to avoid API calls
                  bun run --cwd apps/web compile

    # Job 3: Test
    test:
        name: 🧪 Test
        runs-on: ubuntu-latest
        timeout-minutes: 15
        needs: [lint-and-typecheck, generate-declarative-routes]
        env:
            # API Configuration
            API_URL: http://localhost:8055/
            API_PORT: 8055
            API_PING_PATH: /server/health
            API_ADMIN_TOKEN: ci-test-admin-token

            # App Configuration
            NEXT_PUBLIC_APP_URL: http://localhost:3003/
            NEXT_PUBLIC_APP_PORT: 3003

            # Database Configuration (for testing)
            DB_DATABASE: directus_test
            DB_ROOT_PASSWORD: test-password

            # Authentication
            AUTH_SECRET: ci-test-auth-secret-QgafJQw3O-k1gambz7YGKjtj5ZZe0dnL-WlSw4PtMDc

            # Directus Configuration
            DIRECTUS_SECRET: ci-test-directus-secret-value
            DIRECTUS_ADMIN_EMAIL: ci-admin@test.com
            DIRECTUS_ADMIN_PASSWORD: ci-test-password

            # Next.js Configuration
            NEXT_TELEMETRY_DISABLED: 1
            NODE_ENV: test

            # Development tools (disabled for CI)
            MILLION_LINT: false
            REACT_SCAN: false
            SHOW_AUTH_LOGS: false
            NEXT_PUBLIC_SHOW_AUTH_LOGS: false
            
            # Build optimization
            SKIP_STATIC_GENERATION: true

        steps:
            - name: 📚 Checkout repository
              uses: actions/checkout@v4

            - name: 🐰 Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: 📦 Install dependencies
              run: |
                if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
                  echo "Dependabot PR detected: running bun install without --frozen-lockfile"
                  bun install
                else
                  bun install --frozen-lockfile
                fi

            - name: 🧪 Run tests for all packages
              run: bun run test

    # # Job 3: Merge Coverage Reports
    # merge-coverage:
    #     name: 📊 Merge Coverage Reports
    #     runs-on: ubuntu-latest
    #     timeout-minutes: 10
    #     needs: build-and-test
    #     if: always() && needs.build-and-test.result == 'success'
    #     env:
    #         # API Configuration
    #         API_URL: http://localhost:8055/
    #         API_PORT: 8055
    #         API_PING_PATH: /server/health
    #         API_ADMIN_TOKEN: ci-test-admin-token

    #         # App Configuration
    #         NEXT_PUBLIC_APP_URL: http://localhost:3003/
    #         NEXT_PUBLIC_APP_PORT: 3003

    #         # Database Configuration (for testing)
    #         DB_DATABASE: directus_test
    #         DB_ROOT_PASSWORD: test-password

    #         # Authentication
    #         AUTH_SECRET: ci-test-auth-secret-QgafJQw3O-k1gambz7YGKjtj5ZZe0dnL-WlSw4PtMDc

    #         # Directus Configuration
    #         DIRECTUS_SECRET: ci-test-directus-secret-value
    #         DIRECTUS_ADMIN_EMAIL: ci-admin@test.com
    #         DIRECTUS_ADMIN_PASSWORD: ci-test-password

    #         # Next.js Configuration
    #         NEXT_TELEMETRY_DISABLED: 1
    #         NODE_ENV: test

    #         # Development tools (disabled for CI)
    #         MILLION_LINT: false
    #         REACT_SCAN: false
    #         SHOW_AUTH_LOGS: false
    #         NEXT_PUBLIC_SHOW_AUTH_LOGS: false
            
    #         # Build optimization
    #         SKIP_STATIC_GENERATION: true

    #     steps:
    #         - name: 📚 Checkout repository
    #           uses: actions/checkout@v4

    #         - name: 🐰 Setup Bun
    #           uses: oven-sh/setup-bun@v2
    #           with:
    #               bun-version: ${{ env.BUN_VERSION }}

    #         - name: 📦 Install dependencies
    #           run: |
    #             if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
    #               echo "Dependabot PR detected: running bun install without --frozen-lockfile"
    #               bun install
    #             else
    #               bun install --frozen-lockfile
    #             fi

    #         - name: 🏗️ Build all packages
    #           run: |
    #               # Generate declarative routes for web app before building
    #               bun run --cwd apps/web dr:build
    #               # Build shared packages first
    #               bun x turbo run build --filter="!web"
    #               # Build web app without static generation to avoid API calls
    #               bun run --cwd apps/web compile

    #         - name: 🧪 Run all tests with coverage
    #           run: bun run test:coverage

    #         - name: 📊 Generate merged coverage report
    #           run: |
    #               mkdir -p coverage/report
    #               echo "📋 Coverage Summary:" > coverage/report/summary.txt
    #               if [ -f "coverage/report/index.html" ]; then
    #                 echo "✅ Merged coverage report generated successfully" >> coverage/report/summary.txt
    #               else
    #                 echo "⚠️ No coverage data found" >> coverage/report/summary.txt
    #               fi

    #         - name: 📤 Upload merged coverage artifact
    #           uses: actions/upload-artifact@v4
    #           with:
    #               name: coverage-report
    #               path: |
    #                   coverage/report/
    #                   coverage/coverage-final.json
    #               retention-days: 30

    #         - name: 📊 Upload to Codecov
    #           uses: codecov/codecov-action@v4
    #           with:
    #               files: ./coverage/coverage-final.json
    #               flags: merged
    #               name: merged-coverage
    #               fail_ci_if_error: false
    #           env:
    #               CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    # Job 4: Deployment Ready Check
    deployment-ready:
        name: 🚀 Deployment Ready
        runs-on: ubuntu-latest
        timeout-minutes: 5
        needs: [lint-and-typecheck, build, test, generate-declarative-routes]
        if: always()

        steps:
            - name: 📚 Checkout repository
              uses: actions/checkout@v4

            - name: ✅ Check deployment readiness
              run: |
                  echo "🔍 Checking CI/CD pipeline results..."

                  LINT_STATUS="${{ needs.lint-and-typecheck.result }}"
                  BUILD_STATUS="${{ needs.build.result }}"
                  TEST_STATUS="${{ needs.test.result }}"
                  DR_STATUS="${{ needs.generate-declarative-routes.result }}"

                  echo "📋 Pipeline Results:"
                  echo "  - Lint & Type Check: $LINT_STATUS"
                  echo "  - Build: $BUILD_STATUS"
                  echo "  - Test: $TEST_STATUS"
                  echo "  - Declarative Routes: $DR_STATUS"

                  if [ "$LINT_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ] && [ "$TEST_STATUS" = "success" ] && [ "$DR_STATUS" = "success" ]; then
                    if [ "${{ github.ref }}" = "refs/heads/main" ]; then
                      echo "🚀 ✅ Ready for production deployment!"
                      echo "deployment_ready=true" >> $GITHUB_OUTPUT
                    else
                      echo "🚀 ✅ Ready for staging deployment!"
                      echo "deployment_ready=true" >> $GITHUB_OUTPUT
                    fi
                  else
                    echo "🚀 ❌ Not ready for deployment"
                    echo "deployment_ready=false" >> $GITHUB_OUTPUT
                    exit 1
                  fi

            - name: 📋 Generate deployment summary
              run: |
                  echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Lint & Type Check | ${{ needs.lint-and-typecheck.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Build | ${{ needs.build.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Test | ${{ needs.test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Declarative Routes | ${{ needs.generate-declarative-routes.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [ "${{ github.ref }}" = "refs/heads/main" ]; then
                    echo "🎯 **Branch**: Production (main)" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "🎯 **Branch**: Development" >> $GITHUB_STEP_SUMMARY
                  fi
