services:
  # Database for development
  api-db-dev:
    container_name: ${COMPOSE_PROJECT_NAME:-nextjs-directus}-api-db-dev
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_DATABASE:-nestjs_api}
    volumes:
      - api_db_data_dev:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_DATABASE:-nestjs_api}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network_dev

  # Redis cache for development
  api-cache-dev:
    container_name: ${COMPOSE_PROJECT_NAME:-nextjs-directus}-api-cache-dev
    image: redis:8-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s
    networks:
      - app_network_dev

  # NestJS API for development
  api-dev:
    container_name: ${COMPOSE_PROJECT_NAME:-nextjs-directus}-api-dev
    build:
      context: .
      dockerfile: ./docker/Dockerfile.api.dev
    depends_on:
      api-db-dev:
        condition: service_healthy
      api-cache-dev:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "${API_PORT:-3001}:${API_PORT:-3001}"
    volumes:
      # Mount source code for hot reloading
      - ./apps/api/src:/app/apps/api/src
      # Mount essential configuration files needed for NestJS build
      - ./apps/api/nest-cli.json:/app/apps/api/nest-cli.json
      - ./apps/api/tsconfig.json:/app/apps/api/tsconfig.json
      - ./apps/api/tsconfig.build.json:/app/apps/api/tsconfig.build.json
      # Keep packages in sync
      - ./packages:/app/packages
      # Anonymous volumes for dependencies and build artifacts
      - /app/node_modules
      - /app/apps/api/node_modules
      - /app/apps/api/dist
    environment:
      NODE_ENV: development
      API_PORT: ${API_PORT:-3001}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@api-db-dev:5432/${DB_DATABASE:-nestjs_api}
      REDIS_URL: redis://api-cache-dev:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      AUTH_SECRET: ${AUTH_SECRET:-QgafJQw3O/k1gambz7YGKjtj5ZZe0dnL/WlSw4PtMDc=}
      NEXT_PUBLIC_WEB_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      # CORS Configuration for cross-origin requests from web app
      CORS_ORIGIN: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      # Development specific settings
      LOG_LEVEL: debug
      # Enable polling for file watching to avoid EBUSY errors in Docker on Windows
      CHOKIDAR_USEPOLLING: "true"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://127.0.0.1:${API_PORT:-3001}/health || exit 1
      start_period: 15s
      interval: 15s
      timeout: 15s
      retries: 5
    networks:
      - app_network_dev

  # Next.js web app for development with HMR
  web-dev:
    container_name: ${COMPOSE_PROJECT_NAME:-nextjs-directus}-web-dev
    build:
      context: .
      dockerfile: ./docker/Dockerfile.web.dev
      args:
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
        - NODE_ENV=development
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
        - API_PORT=${API_PORT:-3001}
        - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
        - NEXT_PUBLIC_APP_PORT=${NEXT_PUBLIC_APP_PORT:-3000}
        - API_PING_PATH=${API_PING_PATH:-/health}
        - API_ADMIN_TOKEN=${API_ADMIN_TOKEN:-secret-admin-token}
        - AUTH_SECRET=${AUTH_SECRET:-QgafJQw3O/k1gambz7YGKjtj5ZZe0dnL/WlSw4PtMDc=}
    restart: unless-stopped
    ports:
      - "${NEXT_PUBLIC_APP_PORT:-3000}:${NEXT_PUBLIC_APP_PORT:-3000}"
    volumes:
      # Mount source code for hot reloading
      - .:/app
      - /app/node_modules
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    depends_on:
      api-dev:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - API_PING_PATH=/health
      # Server-side API URL (internal Docker network)
      - API_URL=http://${COMPOSE_PROJECT_NAME:-nextjs-directus}-api-dev:${API_PORT:-3001}
      # Client-side API URL (localhost for browser)
      - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT:-3001}
      - NEXT_PUBLIC_API_PORT=${API_PORT:-3001}
      - NEXT_PUBLIC_APP_URL=http://localhost:${NEXT_PUBLIC_APP_PORT:-3000}
      - NEXT_PUBLIC_APP_PORT=${NEXT_PUBLIC_APP_PORT:-3000}
      - API_ADMIN_TOKEN=${API_ADMIN_TOKEN:-secret-admin-token}
      - AUTH_SECRET=${AUTH_SECRET:-QgafJQw3O/k1gambz7YGKjtj5ZZe0dnL/WlSw4PtMDc=}
      # Enable hot reloading
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app_network_dev

networks:
  app_network_dev:
    name: ${COMPOSE_PROJECT_NAME:-nextjs-directus}_app_network_dev
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"

volumes:
  api_db_data_dev:
    name: ${COMPOSE_PROJECT_NAME:-nextjs-directus}_api_db_data_dev
