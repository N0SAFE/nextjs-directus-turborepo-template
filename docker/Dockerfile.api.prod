# Production Dockerfile for NestJS API
# Multi-stage build for optimized production image

FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    curl \
    wget \
    bash \
    python3 \
    make \
    g++

# Set working directory
WORKDIR /app

# Copy package.json and lock files for better caching
COPY package.json bun.lock* ./
COPY apps/api/package.json ./apps/api/
COPY packages/ ./packages/
COPY turbo.json ./
COPY tsconfig.json ./

# Install dependencies using bun
RUN npm install -g bun

# Stage 1: Build dependencies
FROM base AS deps
RUN bun install --production

# Stage 2: Build the application
FROM base AS builder
COPY apps/api ./apps/api

# Install all dependencies (including dev dependencies for build)
RUN bun install

# Change to API directory and build
WORKDIR /app/apps/api
RUN bun run build

# Stage 3: Production runtime
FROM node:20-alpine AS runtime

ARG NEXT_PUBLIC_API_URL=http://localhost:3001
ARG API_PORT=3001
ARG NEXT_PUBLIC_APP_URL=http://localhost:3000
ARG API_PING_PATH=/health

ENV API_PORT=$API_PORT
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_WEB_URL=$NEXT_PUBLIC_APP_URL
ENV NODE_ENV=production

# Install production dependencies
RUN apk add --no-cache curl wget bash

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Set working directory
WORKDIR /app

# Copy production dependencies
COPY --from=deps --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=deps --chown=nestjs:nodejs /app/apps/api/node_modules ./apps/api/node_modules

# Copy built application
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/dist ./apps/api/dist
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/package.json ./apps/api/

# Copy packages if needed
COPY --from=builder --chown=nestjs:nodejs /app/packages ./packages

# Change to API directory
WORKDIR /app/apps/api

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1

# Start the application
CMD ["node", "dist/main.js"]
